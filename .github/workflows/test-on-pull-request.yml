name: Run Tests and Push Docker Image

on:
  pull_request:
    branches:
      - Dev
      - QA
      - master
  push:
    branches:
      - Dev
      - QA
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Configurar Node.js con una versión compatible
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'  # Usamos la versión compatible de Node.js

      # Paso 3: Instalar dependencias
      - name: Install dependencies
        run: npm install

      # Paso 4: Ejecutar pruebas
      - name: Run Tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless

  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: test # Asegura que los tests se hayan ejecutado antes de la construcción de la imagen Docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Iniciar sesión en GitHub Packages (ghcr.io)
      - name: Log in to GitHub Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Paso 3: Construir la imagen Docker
      - name: Build Docker image
        run: |
          BRANCH_NAME=${{ github.ref_name }}  # Obtener el nombre de la rama o tag
          
          # Reemplazar las barras '/' por guiones '-'
          BRANCH_NAME=$(echo $BRANCH_NAME | tr '/' '-')
          
          # Convertir el nombre del repositorio y el nombre de la rama a minúsculas
          REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          BRANCH_NAME=$(echo $BRANCH_NAME | tr '[:upper:]' '[:lower:]')

          # Validar que BRANCH_NAME no esté vacío
          if [ -z "$BRANCH_NAME" ]; then
            echo "Error: BRANCH_NAME is empty"
            exit 1
          fi
          
          # Verificar que el formato del tag es válido (sin caracteres no permitidos)
          if [[ "$BRANCH_NAME" =~ [^a-z0-9-] ]]; then
            echo "Error: Invalid characters in BRANCH_NAME"
            exit 1
          fi
          
          # Construir la imagen Docker con un tag válido
          echo "Building image with tag: ghcr.io/${REPO_NAME}/my-app:${BRANCH_NAME}"
          docker build -t ghcr.io/${REPO_NAME}/my-app:${BRANCH_NAME} .

      # Paso 4: Subir la imagen Docker a GitHub Packages
      - name: Push Docker image
        run: |
          docker push ghcr.io/${REPO_NAME}/my-app:${BRANCH_NAME}
